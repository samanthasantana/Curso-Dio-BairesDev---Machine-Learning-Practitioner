# -*- coding: utf-8 -*-
"""AvaliacsaodeAprendizadoGrafico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yDknIjPxgT5chHInY4XJsBWXQwNuuTRp
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, f1_score

# 1. Definir caminhos e classes
pasta_imagens = '/content/drive/MyDrive/Estudos/imagens'  # Substitua pelo caminho da sua pasta
classes = {'paisagemDia': 0, 'paisagemNoite': 1}  # Update class names to match your folder structure

# 2. Carregar rótulos verdadeiros (y_true) and image paths
y_true = []
image_paths = []  # Store image paths for prediction
for classe, rotulo in classes.items():
    pasta_classe = os.path.join(pasta_imagens, classe)
    for nome_arquivo in os.listdir(pasta_classe):
        if nome_arquivo.endswith(('.jpg', '.jpeg', '.png')):  # Consider common image extensions
            y_true.append(rotulo)
            image_paths.append(os.path.join(pasta_classe, nome_arquivo))
y_true = np.array(y_true)

# 3. Carregar e pré-processar imagens, obter previsões (y_pred)
y_pred = []
for img_path in image_paths:
    imagem = load_img(img_path, target_size=(150, 150))
    imagem_array = img_to_array(imagem) / 255.0
    imagem_array = imagem_array.reshape((1, 150, 150, 3))
    prediction = model.predict(imagem_array)
    predicted_class = int(prediction[0][0] > 0.5)
    y_pred.append(predicted_class)
y_pred = np.array(y_pred)

# 4. Calcular a matriz de confusão ANTES de calcular a especificidade
cm = confusion_matrix(y_true, y_pred) # Moved this line up



corretos = y_true == y_pred
num_corretos = np.sum(corretos)
acuracia = num_corretos / len(y_true)
print(f"Acurácia: {acuracia}")

TP = np.sum((y_true == 1) & (y_pred == 1))
FN = np.sum((y_true == 1) & (y_pred == 0))  # Conta onde y_true é 1 e y_pred é 0
sensibilidade = TP / (TP + FN)
print(f"Sensibilidade (Recall): {sensibilidade}")


TP = np.sum((y_true == 1) & (y_pred == 1))
FP = np.sum((y_true == 0) & (y_pred == 1))
precisao = TP / (TP + FP)
print(f"Precisão: {precisao}")


def calcular_f1_score(y_true, y_pred):
    """Calcula o F1-score."""
    TP = np.sum((y_true == 1) & (y_pred == 1))
    FP = np.sum((y_true == 0) & (y_pred == 1))
    FN = np.sum((y_true == 1) & (y_pred == 0))

    precisao = TP / (TP + FP) if (TP + FP) != 0 else 0
    sensibilidade = TP / (TP + FN) if (TP + FN) != 0 else 0

    f1_score = 2 * (precisao * sensibilidade) / (precisao + sensibilidade) if (precisao + sensibilidade) != 0 else 0
    return f1_score

f1 = calcular_f1_score(y_true, y_pred)
print(f"F1-score: {f1}")

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=list(classes.keys()),
            yticklabels=list(classes.keys()))
plt.xlabel("Rótulo Predito")
plt.ylabel("Rótulo Verdadeiro")
plt.title("Matriz de Confusão")
plt.show()


model.save('minha_imagem_classifica.keras')
print("Model saved to 'minha_imagem_classifica.keras'")