# -*- coding: utf-8 -*-
"""Tarefarecomendacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17iotQNcGjcN26iMAXS91HJl4bO1LndqD
"""

import os
import cv2
import numpy as np
import tensorflow as tf

modelo = tf.keras.models.load_model('modelofigura.keras')

imagem_busca_path = '/content/drive/MyDrive/ursinhoteste.jpg'

imagem_busca = cv2.imread(imagem_busca_path)
imagem_busca = cv2.resize(imagem_busca, (150, 150))
imagem_busca = imagem_busca / 255.0

caracteristicas_busca = modelo.predict(np.expand_dims(imagem_busca, axis=0))

classes = ['Capinha', 'Garrafa_de_agua', 'PortaDetergente', 'Ursinho_de_pelucia']
limite_similaridade = 0.9  # Ajuste conforme necessário

import os
import cv2
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

modelo = tf.keras.models.load_model('modelofigura.keras')

# Caminho da imagem de busca (ursinho de pelúcia)
imagem_busca_path = '/content/drive/MyDrive/ursinhoteste.jpg'

# Carregar e pré-processar a imagem de busca
imagem_busca = cv2.imread(imagem_busca_path)
imagem_busca = cv2.resize(imagem_busca, (150, 150))
imagem_busca = imagem_busca / 255.0

# Extrair características da imagem de busca
caracteristicas_busca = modelo.predict(np.expand_dims(imagem_busca, axis=0))

# *** Determine the class of the search image ***
# Assume class names are in the path (e.g., '/content/drive/MyDrive/Exemplos/Ursinho_de_pelucia/ursinhopelucia2.jpg')

# Fix: Correctly extract the class name from the path
classe_busca = 'Ursinho_de_pelucia'  # Change 'Ursinho_de_pelucia' to the actual class name or folder containing the images you want to search.

limite_similaridade = 0.85  # Ajuste conforme necessário

imagens_similares = []

pasta_classe = '/content/drive/MyDrive/Exemplos'

# *** Search only within the class of the search image ***
pasta_classe = os.path.join(pasta_classe, classe_busca)

for nome_arquivo in os.listdir(pasta_classe):
    if nome_arquivo.endswith(('.jpg', '.jpeg', '.png')):
        caminho_imagem = os.path.join(pasta_classe, nome_arquivo)
        imagem = cv2.imread(caminho_imagem)
        imagem = cv2.resize(imagem, (150, 150))
        imagem = imagem / 255.0

        caracteristicas_imagem = modelo.predict(np.expand_dims(imagem, axis=0))

        similaridade = np.dot(caracteristicas_busca[0], caracteristicas_imagem[0]) / (np.linalg.norm(caracteristicas_busca[0]) * np.linalg.norm(caracteristicas_imagem[0]))

        if similaridade >= limite_similaridade and caminho_imagem != imagem_busca_path: # Exclude the search image itself
            imagens_similares.append(caminho_imagem)


# Exibir as imagens similares
if imagens_similares:
    print(f'Imagens similares encontradas na classe: {classe_busca}')

    num_images = len(imagens_similares)
    fig, axes = plt.subplots(1, num_images, figsize=(15, 5))

    for i, img_path in enumerate(imagens_similares):
        img = plt.imread(img_path)
        axes[i].imshow(img)
        axes[i].set_title(f"Imagem Similar: {os.path.basename(img_path)}")
        axes[i].axis('off')

    plt.show()